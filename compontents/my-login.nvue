<template>
	<view class="login-container">
		<!-- 提示登录的图标 -->
		<uni-icons type="contact-filled" size="100" color="#AFAFAF"></uni-icons>
		<!-- 登录按钮 -->
		<button type="primary" class="btn-login" open-type="getUserInfo"
			@getuserinfo="getUserInfo"><text class="btn-login-text">一键登录</text></button>
		<!-- 登录提示 -->
		<view><text class="tips-text">登录后尽享更多权益</text></view>
	</view>
</template>

<script>
	// 1. 按需导入 mapMutations 辅助函数
	import {
		mapState,
		mapMutations
	} from 'vuex'
	import api from '@/config/api.js'
	import {
		request
	} from '@/utils/util.js'
	export default {
		 computed: {
		    // 调用 mapState 辅助方法，把 m_user 模块中的数据映射到当前用组件中使用
		    ...mapState('m_user', ['redirectInfo']),
		  },
		methods: {
			...mapMutations('m_user', ['updateUserInfo', 'updateToken','updateRedirectInfo']),
			// 获取微信用户的基本信息
			getUserInfo(e) {
				console.log(e, "getUserInfo");
				// 判断是否获取用户信息成功
				if (e.detail.errMsg === 'getUserInfo:fail auth deny') return uni.showToast({
					title: `您取消了登录授权`,
					icon: 'none'
				})

				// 获取用户信息成功， e.detail.userInfo 就是用户的基本信息
				// console.log(e.detail.userInfo)
				// 3. 将用户的基本信息存储到 vuex 中
				this.updateUserInfo(e.detail.userInfo)
				// 获取登录成功后的 Token 字符串
				// 直接把token保存到vuex中
				
				this.getToken(e.detail)
			},
			// 调用登录接口，换取永久的 token
			async getToken(info) {
				console.log(info, "info");
				// 调用微信登录接口
				const [err, res] = await uni.login().catch(err => err)
				console.log(err, res);
				// 判断是否 uni.login() 调用失败
				if (err || res.errMsg !== 'login:ok') return uni.showToast({
					title: `登录失败`,
					icon: 'error'
				})

				// 准备参数对象
				const query = {
					code: res.code,
					encryptedData: info.encryptedData,
					iv: info.iv,
					rawData: info.rawData,
					signature: info.signature
				}
				// 换取 token
				const {
					data: loginResult
				} = await request(api.getUserToken, query, "POST")
				// if (loginResult.meta.status !== 200) return uni.showToast({
				// 	title: `登录失败`,
				// 	icon: 'error'
				// })

				// 2. 更新 vuex 中的 token
				let token = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOjEyLCJpYXQiOjE1MjU0MDIyMjMsImV4cCI6MTUyNTQ4ODYyM30.g-4GtEQNPwT_Xs0Pq7Lrco_9DfHQQsBiOKZerkO-O-o';
				this.updateToken(token||loginResult.message.token)
				 // 判断 vuex 中的 redirectInfo 是否为 null
				  // 如果不为 null，则登录成功之后，需要重新导航到对应的页面
				 this.navigateBack()

			},
			// 返回登录之前的页面
			navigateBack() {
			  // redirectInfo 不为 null，并且导航方式为 switchTab
			  if (this.redirectInfo && this.redirectInfo.openType === 'switchTab') {
			    // 调用小程序提供的 uni.switchTab() API 进行页面的导航
			    uni.switchTab({
			      // 要导航到的页面地址
			      url: this.redirectInfo.from,
			      // 导航成功之后，把 vuex 中的 redirectInfo 对象重置为 null
			      complete: () => {
			        this.updateRedirectInfo(null)
			      }
			    })
			  }
			}
		}
	}
</script>

<style lang="scss" scoped>
	.login-container {
		// 登录盒子的样式
		width: 750rpx;
		height: 750rpx;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		background-color: #f8f8f8;
		position: relative;
		overflow: hidden;

		// 绘制登录盒子底部的半椭圆造型
		&::after {
			content: ' ';
			display: block;
			position: absolute;
			width: 750rpx;
			height: 80rpx;
			left: 0;
			bottom: 0;
			background-color: white;
			border-radius: 100%;
			transform: translateY(50%);
		}

		// 登录按钮的样式
		.btn-login {
			width: 675rpx;
			border-radius: 200rpx;
			margin: 30rpx 0;
			/* #ifdef APP-PLUS */
				padding: 24rpx;
				border-color: transparent;
			/* #endif */
			
			background-color: #c00000;
			.btn-login-text{
				font-size: 36rpx;
				color: white;
			}
		}

		// 按钮下方提示消息的样式
		.tips-text {
			font-size: 24rpx;
			color: gray;
		}
	}
</style>
